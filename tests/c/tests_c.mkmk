# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import re

filenames = [
  "test_arena_c.cc",
  "test_arena_cpp.cc",
  "test_binary.cc",
  "test_generic.cc",
  "test_text.cc",
  "test_variant_c.cc",
  "test_variant_cpp.cc",
]

# Compile a single test file, ensuring that the include paths are hooked up
# right.
def compile_test_file(source):
  # Include the C sources.
  source.add_include(get_root().get_child("src", "c"))
  source.add_include(get_dep("tclib").get_child("src", "c"))
  return source.get_object()

test_library = get_group("library")

# Compile the test source files.
for filename in filenames:
  source_file = c.get_source_file(filename)
  object_file = compile_test_file(source_file)
  object_file.add_library_requirement(posix="yaml-cpp")
  test_library.add_member(object_file)

main_file_names = [
  "test.cc",
]

# Compile the test main executable.
test_main = c.get_executable("main")
test_main.add_object(test_library)
test_main.add_object(get_dep_external("tclib", "src", "c", "test", "library"))
test_main.add_object(get_dep_external("tclib", "src", "c", "utils", "library"))
test_main.add_object(get_dep_external("tclib", "src", "c", "io", "library"))
test_main.add_object(get_external("src", "objects"))
for main_file_name in main_file_names:
  main_file = c.get_source_file(main_file_name)
  object_file = compile_test_file(main_file)
  test_main.add_object(object_file)

run_tests = get_group("run-tests")

# Add targets to run the test cases.
for filename in filenames:
  test_case = test.get_exec_test_case(filename)
  test_case.set_runner(test_main)
  stripped_test_case_name = re.match(r"test_(\w+).c", filename).group(1)
  test_case.set_arguments(stripped_test_case_name)
  run_tests.add_member(test_case)
